<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/charging_manage_be/repository/payments/PaymentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/charging_manage_be/repository/payments/PaymentRepository.java" />
              <option name="originalContent" value="package charging_manage_be.repository.payments;&#10;&#10;import charging_manage_be.model.entity.payments.PaymentEntity;&#10;&#10;public interface PaymentRepository {&#10;    public boolean addPayment(PaymentEntity payment);&#10;    public boolean existId(String id);&#10;}" />
              <option name="updatedContent" value="package charging_manage_be.repository.payments;&#10;&#10;import charging_manage_be.model.entity.payments.PaymentEntity;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface PaymentRepository extends JpaRepository&lt;PaymentEntity, String&gt; {&#10;    // Basic CRUD operations are automatically provided by JpaRepository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/charging_manage_be/services/payments/PaymentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/charging_manage_be/services/payments/PaymentService.java" />
              <option name="updatedContent" value="package charging_manage_be.services.payments;&#10;&#10;import charging_manage_be.model.entity.payments.PaymentEntity;&#10;import charging_manage_be.model.entity.users.UserEntity;&#10;&#10;import java.math.BigDecimal;&#10;&#10;public interface PaymentService {&#10;    PaymentEntity createPayment(UserEntity user, String chargingSessionId, BigDecimal price);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/charging_manage_be/services/payments/PaymentServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/charging_manage_be/services/payments/PaymentServiceImpl.java" />
              <option name="originalContent" value="package charging_manage_be.services.payments;&#10;&#10;import charging_manage_be.model.entity.payments.PaymentEntity;&#10;import charging_manage_be.model.entity.users.UserEntity;&#10;import charging_manage_be.repository.payments.PaymentRepositoryImpl;&#10;&#10;import java.math.BigDecimal;&#10;&#10;import static charging_manage_be.util.RandomId.generateRandomId;&#10;&#10;//@service&#10;//Gắn nhãn cho class → nói với Spring “Đây là logic nghiệp vụ, quản lý tôi đi.”&#10;//@Transactional&#10;//Đảm bảo mọi thao tác DB trong class/method này thực hiện trọn gói, lỗi thì rollback, thành công thì commi&#10;public class PaymentServiceImpl {&#10;    private final int characterLength = 4;&#10;    private final int numberLength = 4;&#10;    private PaymentRepositoryImpl paymentRepositoryImpl;&#10;    //@Autowired&#10;    //@Autowired =&gt; private Pen pen;&#10;    // no @Autowired =&gt;private Pen  pen = new Pen;&#10;    public PaymentServiceImpl(String JpaName)&#10;    {&#10;        this.paymentRepositoryImpl =  paymentRepositoryImpl;&#10;    }&#10;&#10;    private String generateUniquePaymentId() {&#10;        String newId;&#10;        do {&#10;            newId = generateRandomId(characterLength, numberLength);&#10;        } while (isPaymentIdExists(newId));&#10;        return newId;&#10;    }&#10;&#10;    private boolean isPaymentIdExists(String id) {&#10;        return paymentRepositoryImpl.existId(id);&#10;    }&#10;&#10;    public PaymentEntity createPayment(UserEntity userId, String chargingSessionId, BigDecimal price) {&#10;        PaymentEntity payment = new PaymentEntity();&#10;        payment.setPaymentId(generateUniquePaymentId());&#10;        payment.setUser(userId);&#10;        payment.setChargingSessionId(chargingSessionId);&#10;        payment.setPrice(price);&#10;        // Lưu payment vào database&#10;        if (paymentRepositoryImpl.addPayment(payment)) {&#10;            return payment;&#10;        }&#10;        return null;&#10;    }&#10;    public boolean invoicePayment(String paymentId)&#10;    {&#10;        PaymentEntity invoicePayment = paymentRepositoryImpl.getPaymentById(paymentId);&#10;        if(invoicePayment == null)&#10;        {&#10;            return false;&#10;        }&#10;        invoicePayment.setPaid(true);&#10;        return paymentRepositoryImpl.updatePayment(invoicePayment);&#10;    }&#10;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package charging_manage_be.services.payments;&#10;&#10;import charging_manage_be.model.entity.payments.PaymentEntity;&#10;import charging_manage_be.model.entity.users.UserEntity;&#10;import charging_manage_be.repository.payments.PaymentRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;@Service&#10;@Transactional&#10;public class PaymentServiceImpl implements PaymentService {&#10;    &#10;    private final PaymentRepository paymentRepository;&#10;&#10;    @Autowired&#10;    public PaymentServiceImpl(PaymentRepository paymentRepository) {&#10;        this.paymentRepository = paymentRepository;&#10;    }&#10;&#10;    public PaymentEntity createPayment(UserEntity user, String chargingSessionId, BigDecimal price) {&#10;        PaymentEntity payment = new PaymentEntity();&#10;        payment.setUser(user);&#10;        payment.setChargingSessionId(chargingSessionId);&#10;        payment.setPrice(price);&#10;        payment.setCreatedAt(LocalDateTime.now());&#10;        payment.setPaid(false);&#10;        return paymentRepository.save(payment);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>